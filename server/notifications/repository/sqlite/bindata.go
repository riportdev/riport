// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 001_init.down.sql (29B)
// 001_init.up.sql (1.394kB)

package sqlite

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\xcb\x2f\xc9\x4c\xcb\x4c\x4e\x2c\xc9\xcc\xcf\x2b\x8e\xcf\xc9\x4f\xb7\x06\x04\x00\x00\xff\xff\x5d\x68\xf4\x86\x1d\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 29, mode: os.FileMode(0644), modTime: time.Unix(1688094241, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xdc, 0x32, 0xb, 0xf2, 0x33, 0xb6, 0x50, 0x9e, 0x36, 0x9a, 0x12, 0x8c, 0xea, 0x4e, 0x29, 0x51, 0xab, 0x6d, 0x90, 0x1f, 0x8d, 0x6c, 0x7b, 0x4e, 0x7e, 0xf, 0x26, 0x3d, 0x48, 0x1a, 0x96}}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x4f\xdb\x40\x10\xbd\xe7\x57\xbc\xe6\x02\x91\xec\x0a\x21\xb5\x17\xd4\x83\x1b\x5c\x81\x1a\x02\x0a\xa6\xe2\x66\x6d\xbc\x93\x64\x8b\xbd\xeb\xce\x8e\x81\xf4\xd7\x57\xbb\xf9\xa0\x09\x1f\xad\xd4\xfa\x38\x9e\xf7\xde\xce\x9b\x8f\xe1\x24\xcf\x8a\x1c\x45\xf6\x79\x94\xc3\x3a\x31\x33\x53\x29\x31\xce\xfa\xb2\x76\x73\x1c\xf6\x00\xec\xc4\x4b\xa3\x31\x3c\xcb\x26\x87\xc7\x1f\x07\x18\x5f\x16\x18\xdf\x8c\x46\x18\x9e\xe5\xc3\xaf\x38\xdc\x4f\x7c\xf7\x09\x07\x07\x83\x04\x69\xba\xcf\x91\xc0\x76\xcd\x94\x18\x6e\x06\x59\x10\x82\x18\x59\xe1\x65\x82\xae\x36\x3a\xca\x8a\x69\xc8\x8b\x6a\x5a\x9c\x66\x45\x5e\x9c\x5f\xe4\x4f\x82\xa7\xf9\x97\xec\x66\x54\x60\x78\x33\x99\xe4\xe3\xa2\x0c\x7f\xaf\x8b\xec\xe2\x2a\x09\xc8\x34\x7d\x02\x27\xd0\x4a\x08\xca\xea\x18\x0b\x82\x0d\x79\xaf\xe6\x04\x6d\x7c\xab\xa4\x5a\x18\x3b\x8f\x82\x95\xb3\x42\x56\x8a\x65\x4b\xf8\x96\x4d\x62\x99\x1f\x8e\x06\x78\x2e\xdb\xef\x27\x11\xc1\x34\x23\x26\x5b\x51\xa8\x76\x03\x09\xce\xbc\x08\x59\xbd\x8c\x69\xb6\x81\x24\x68\xd9\x4d\x6b\x6a\x60\x34\x16\xca\x6a\xd2\x70\xf7\xc4\x98\x2e\xa3\x2b\xaa\x16\x62\x63\xe7\xf0\xc4\xf7\xa6\xa2\xf7\x2b\x5f\x58\x59\xdf\x3a\x16\x14\xf9\x6d\xf1\x9a\xd2\xdf\x7e\xc1\xab\x0d\x61\x02\x32\xb2\x20\x46\xdf\x37\xd2\xf6\xe1\x18\x56\xad\x3c\x0b\xcf\xf1\x15\x9b\x56\xd6\x85\x57\xa6\x35\x64\xc5\xff\x87\x47\x44\x53\x36\x7c\x49\x28\xd6\xa8\xda\xfc\x24\x0d\xc5\xac\x96\xbd\xa8\xe8\x25\xb4\x71\xeb\xf1\xd1\xf3\xe9\x5b\x65\xfc\x36\x73\xfe\x47\x6d\x84\xa0\x1d\x79\x7b\x20\xa8\xcd\x1d\x81\x6c\xd7\xf8\x35\x63\x37\xfd\x4e\xd5\x1b\x2e\xc6\xac\xa9\xd3\xcb\x37\x52\x62\x8e\xeb\xde\xea\x45\x9a\xe2\x61\xa1\x84\x42\x63\x89\xd9\x31\x8c\x07\x93\x74\x6c\x43\xbf\x6d\xbd\xc4\xc3\x82\xec\xf3\x7f\x91\x9b\x98\x5f\xe5\xfe\x07\xea\xc1\x49\x2f\x4d\x7b\xbd\xf5\xfe\x9f\x8f\x4f\xf3\x5b\x18\xfd\x58\xee\xde\x00\xa3\x7b\x97\xe3\x97\xee\xc2\xde\x3a\x0f\x4e\xfe\x48\xb5\x5d\xc8\x58\xd5\xcb\xac\xdb\x9c\xc0\x17\x1a\x28\x4a\x3a\x5f\x56\x4e\x53\x82\x30\x92\xeb\x08\x42\xe4\xa9\xce\xf5\xb6\x5c\x5f\x14\x57\x71\x53\xc2\x59\xe1\x18\xa2\x47\x23\xab\xe4\xdd\x11\x0e\xdc\x8d\xb4\x65\xf4\xc5\x27\x6b\x7f\x36\x77\x61\x4b\x3c\x63\xd7\xec\x53\x47\x6c\x64\x29\x99\x7c\xeb\xac\xa7\x04\x33\xc3\x5e\x70\x7c\x17\x64\xbc\xe8\x30\x0f\xe1\xe0\x78\xd1\xa1\x7d\x3b\xda\xbf\x02\x00\x00\xff\xff\x02\x6e\x23\x70\x72\x05\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1394, mode: os.FileMode(0644), modTime: time.Unix(1689661695, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x14, 0x0, 0x4, 0xe6, 0xa9, 0xa0, 0x59, 0x83, 0x63, 0x8e, 0xe8, 0xd8, 0xfc, 0x4f, 0xa5, 0x57, 0x74, 0x32, 0xb9, 0x8d, 0xae, 0x37, 0xa1, 0x7, 0x82, 0x1, 0xa5, 0x8e, 0x43, 0x1d, 0x95, 0x33}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": {_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   {_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
